{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Yassine\\\\Desktop\\\\chatclient\\\\chat-app\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\nconst ChatRoom = () => {\n  _s();\n  const [publicChats, setpublicChats] = useState([]);\n  const [privateChats, seetPrivateChats] = useState(new Map());\n  const [userData, setUserData] = useState({\n    username: \"\",\n    recievername: \"\",\n    connected: false,\n    message: \"\"\n  });\n  const handleUserName = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({\n      ...userData,\n      \"username\": value\n    });\n  };\n  const registerUser = () => {\n    let Sock = new SockJS('http://localhost:8080/ws');\n    stompClient.connect({}, onConnected, onError);\n  };\n  const onConnected = () => {\n    setUserData({\n      ...userData,\n      \"connected\": true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n  const onError = err => {\n    console.log(err);\n  };\n  const onPublicMessageRecieved = payload => {\n    let payloadData = JSON.parse(payload.body);\n    switch (payloadData.status) {\n      case \"JOIN\":\n        if (!privateChats.get(payloadData.senderName)) {\n          privateChats.set(payloadData.senderName, []);\n          setPrivateChats(new Map(privateChats));\n        }\n        break;\n      case \"MESSAGE\":\n        publicChats.push(payloadData);\n        setpublicChats({\n          ...publicChats\n        });\n        break;\n    }\n  };\n  const onPrivateMessageRecieved = payload => {\n    let payloadData = JSON.parse(payload);\n    if (privateChats.get(payloadData.senderName)) {\n      privateChats.get(payloadData.senderName).push(payloadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payloadData);\n      privateChats.set(payloadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Chatroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this), [...privateChats.keys()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"member\",\n            children: name\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [...publicChats.map()].map((name, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"member\",\n          children: name\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"username\",\n        placeholder: \"Enter the user name\",\n        value: userData.username,\n        onChange: handleUserName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: registerUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatRoom, \"lY6zC0zvEeUCT4AKRsV2Ylw2veo=\");\n_c = ChatRoom;\nexport default ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useState","over","SockJS","jsxDEV","_jsxDEV","stompClient","ChatRoom","_s","publicChats","setpublicChats","privateChats","seetPrivateChats","Map","userData","setUserData","username","recievername","connected","message","handleUserName","event","value","target","registerUser","Sock","connect","onConnected","onError","subscribe","onMessageReceived","onPrivateMessage","userJoin","err","console","log","onPublicMessageRecieved","payload","payloadData","JSON","parse","body","status","get","senderName","set","setPrivateChats","push","onPrivateMessageRecieved","list","className","children","fileName","_jsxFileName","lineNumber","columnNumber","keys","map","name","index","id","placeholder","onChange","type","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Yassine/Desktop/chatclient/chat-app/src/components/ChatRoom.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport { over } from 'stompjs'\r\nimport SockJS from 'sockjs-client';\r\n\r\n\r\nvar stompClient = null;\r\nconst ChatRoom = () => {\r\n    const [publicChats, setpublicChats] = useState([]);\r\n    const [privateChats, seetPrivateChats] = useState(new Map());\r\n    const [userData, setUserData] = useState({\r\n        username: \"\",\r\n        recievername: \"\",\r\n        connected: false,\r\n        message: \"\"\r\n    });\r\n\r\n    const handleUserName = (event) => {\r\n        const { value } = event.target;\r\n        setUserData({ ...userData, \"username\": value })\r\n    }\r\n\r\n    const registerUser = () => {\r\n        let Sock = new SockJS('http://localhost:8080/ws')\r\n        stompClient.connect({}, onConnected, onError);\r\n    }\r\n\r\n    const onConnected = () => {\r\n        setUserData({ ...userData, \"connected\": true });\r\n        stompClient.subscribe('/chatroom/public', onMessageReceived);\r\n        stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\r\n        userJoin();\r\n    }\r\n\r\n    const onError = (err) => {\r\n        console.log(err);\r\n\r\n    }\r\n\r\n    const onPublicMessageRecieved = (payload) => {\r\n        let payloadData = JSON.parse(payload.body);\r\n        switch (payloadData.status) {\r\n            case \"JOIN\":\r\n                if (!privateChats.get(payloadData.senderName)) {\r\n                    privateChats.set(payloadData.senderName, []);\r\n                    setPrivateChats(new Map(privateChats))\r\n                }\r\n\r\n                break;\r\n            case \"MESSAGE\":\r\n                publicChats.push(payloadData);\r\n                setpublicChats({ ...publicChats });\r\n                break;\r\n        }\r\n    }\r\n\r\n    const onPrivateMessageRecieved = (payload) => {\r\n        let payloadData = JSON.parse(payload);\r\n        if (privateChats.get(payloadData.senderName)) {\r\n            privateChats.get(payloadData.senderName).push(payloadData);\r\n            setPrivateChats(new Map(privateChats));\r\n        } else {\r\n            let list = [];\r\n            list.push(payloadData);\r\n            privateChats.set(payloadData.senderName, list);\r\n            setPrivateChats(new Map(privateChats))\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className='container'>\r\n            {userData.connected ?\r\n                <div className='chat-box'>\r\n                    <div className='member-list'>\r\n                        <ul>\r\n                            <li>Chatroom</li>\r\n                            {[...privateChats.keys()].map((name, index) => (\r\n                                <li className='member' key={index}>\r\n                                    {name}\r\n                                </li>\r\n                            ))}\r\n                        </ul>\r\n                    </div>\r\n                    <div className='chat-content'>\r\n                        {[...publicChats.map()].map((name, index) => (\r\n                            <li className='member' key={index}>\r\n                                {name}\r\n                            </li>\r\n                        ))}\r\n                    </div>\r\n                </div>\r\n                :\r\n                <div className='register'>\r\n                    <input\r\n                        id='username'\r\n                        placeholder='Enter the user name'\r\n                        value={userData.username}\r\n                        onChange={handleUserName}\r\n                    />\r\n                    <button type='button' onClick={registerUser}></button>\r\n\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatRoom"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}